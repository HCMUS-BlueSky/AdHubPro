<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>AdHubPro</title>
    <meta
      name="viewport"
      content="initial-scale=1,maximum-scale=1,user-scalable=no"
    />
    <link
      href="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css"
      rel="stylesheet"
    />
    <!-- Bootstrap -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"
      crossorigin="anonymous"
    />
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4"
      crossorigin="anonymous"
    ></script>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css"
    />
    <!-- Tiny -->
    <script
      src="https://cdn.tiny.cloud/1/9eza4vy0528u7nwcd7xg321gt9gk94fhc6j1c49lhsvqa7gt/tinymce/6/tinymce.min.js"
      referrerpolicy="origin"
    ></script>
    <script>
      tinymce.init({
        selector: "#mytextarea",
      });
    </script>
    <!-- Mapbox -->
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js"></script>
    <!-- CSS -->
    <link href="/css/styles.css" rel="stylesheet" type="text/css" />
    <style>
      body {
        margin: 0;
        padding: 0;
      }
      #map {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 100%;
      }
      .marker {
        background-image: url("https://docs.mapbox.com/help/demos/custom-markers-gl-js/mapbox-icon.png");
        background-size: cover;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        cursor: pointer;
      }
      .mapboxgl-popup {
        max-width: 200px;
      }
      .mapboxgl-popup-content {
        text-align: center;
        font-family: "Open Sans", sans-serif;
      }
    </style>
  </head>
  <body>
    <!-- Load the `mapbox-gl-geocoder` plugin. -->
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.min.js"></script>
    <link
      rel="stylesheet"
      href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.css"
      type="text/css"
    />
    <style>
      /* Side bar */
      .rounded-rect {
        background: white;
        border-radius: 10px;
        box-shadow: 0 0 50px -25px black;
      }

      .flex-center {
        position: absolute;
        display: flex;
        justify-content: center;
        align-items: center;
      }

      .flex-center.left {
        left: 0px;
      }

      .sidebar-content {
        overflow: scroll;
        width: 95%;
        height: 95%;
        font-family: Arial, Helvetica, sans-serif;
        font-size: 32px;
        color: gray;
      }

      .sidebar-toggle {
        position: absolute;
        width: 1.3em;
        height: 1.3em;
        overflow: visible;
        display: flex;
        justify-content: center;
        align-items: center;
      }

      .sidebar-toggle.left {
        right: -1.5em;
      }

      .sidebar-toggle:hover {
        color: #0aa1cf;
        cursor: pointer;
      }

      .sidebar {
        transition: transform 1s;
        z-index: 1;
        width: 400px;
        height: 100%;
      }

      /*
      The sidebar styling has them "expanded" by default, we use CSS transforms to push them offscreen
      The toggleSidebar() function removes this class from the element in order to expand it.
      */
      .left.collapsed {
        transform: translateX(-395px);
      }
    </style>

    <div id="map">
      <div id="left" class="sidebar flex-center left collapsed">
        <div
          class="sidebar-content rounded-rect d-flex flex-column align-items-center"
        >
          <div
            class="sidebar-toggle rounded-rect left"
            onclick="toggleSidebar('left')"
          >
            &rarr;
          </div>
        </div>
      </div>
    </div>

    <!-- Modal section -->
    <div
      class="modal fade"
      id="feedback"
      data-bs-backdrop="static"
      aria-hidden="true"
      aria-labelledby="feedbackLabel"
      tabindex="-1"
    >
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <form class="report-modal">
              <div class="row">
                <div class="col-7 d-flex flex-column">
                  <h2>Thông tin người báo cáo</h2>
                  <div class="mb-2">
                    <label for="name" class="col-form-label"></label>
                    <input
                      type="text"
                      class="form-control"
                      id="text"
                      placeholder="Họ và tên"
                    />
                  </div>
                  <div class="mb-2">
                    <label for="email" class="col-form-label"></label>
                    <input
                      type="email"
                      class="form-control"
                      id="email"
                      placeholder="Email"
                    />
                  </div>
                  <div class="mb-2">
                    <label for="tel" class="col-form-label"></label>
                    <input
                      type="number"
                      class="form-control"
                      id="tel"
                      placeholder="Số điện thoại"
                    />
                  </div>
                </div>
                <div class="col-5 d-flex flex-column">
                  <h2 class="mb-4">Hình thức báo cáo</h2>
                  <div class="report-radio">
                    <div class="mb-3">
                      <input type="radio" id="report1" name="age" value="30" />
                      <label for="report1">Tố giác tội phạm</label><br />
                    </div>
                    <div class="mb-3">
                      <input type="radio" id="report2" name="age" value="60" />
                      <label for="report2">Đăng ký nội dung</label><br />
                    </div>
                    <div class="mb-3">
                      <input type="radio" id="report3" name="age" value="100" />
                      <label for="report3">Đóng góp ý kiến</label><br />
                    </div>
                    <div class="mb-3">
                      <input type="radio" id="report4" name="age" value="100" />
                      <label for="report4">Giải đáp thắc mắc</label><br />
                    </div>
                  </div>
                </div>
              </div>
              <div class="row mt-3">
                <h2>Nội dung báo cáo</h2>
                <textarea id="mytextarea"></textarea>
              </div>
              <div class="row mt-3">
                <h2>Hình ảnh minh họa</h2>
                <div class="form-file">
                  <div class="form-file-left">
                    <p>Kéo thả hình vào đây (tối đa 2 hình)</p>
                    <p>Độ lớn tối đa: 10M</p>
                  </div>
                  <label for="file-upload" class="custom-file-upload">
                    <p>Chọn một file</p>
                    <input id="file-upload" type="file" multiple />
                  </label>
                </div>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button class="btn btn-primary" type="submit">Submit</button>
          </div>
        </div>
      </div>
    </div>

    <script>
      mapboxgl.accessToken =
        "pk.eyJ1Ijoibm1raG9pMjEiLCJhIjoiY2xvMno5ZzhyMGQzdTJ2bGVkbTc4bGZ5dSJ9.9ljGVzjte5iqJXpbOiAN1Q";
      const map = new mapboxgl.Map({
        container: "map",
        style: "mapbox://styles/mapbox/streets-v12",
        center: [106.68247166663183, 10.762993690850745],
        zoom: 15,
      });
      const geocoder = new MapboxGeocoder({
        accessToken: mapboxgl.accessToken,
        mapboxgl: mapboxgl,
        reverseGeocode: true,
        flipCoordinates: true,
        marker: {
          color: "red",
        },
        flyTo: {
          bearing: 0,
          animate: true,
          duration: 750,
          speed: 1,
          essential: true,
          curve: 1,
          easing: function (t) {
            return Math.sin((t * Math.PI) / 2);
          },
        },
      });
      map.addControl(geocoder);
      let currentMarker = null;
      // Fetch locations data
      async function logLocations() {
        const response = await fetch("http://localhost:4000/api/location");
        const locations = await response.json();
        return locations;
      }

      const AdsCardFactory = (position) => {
        return `
          <div class="card-header text-center fw-bold fs-4 font-weight-bold py-3">Tra cụm pano</div>
          <div class="card-body">
            <h5 class="card-title fw-bold">${position.address}</h5>
            <h5 class="card-text">Kích thước: 2.5m x 10m</h5>
            <h5 class="card-text">Số lượng: 1 trụ/bảng</h5>
            <h5 class="card-text">Hình thức: ${position.method}</h5>
            <h5 class="card-text">Phân loại: ${position.type}</h5>
            <div class="d-flex">
              <div class="me-auto p-2 d-flex align-items-center">
                <i class="bi bi-info-circle" style="font-size:24px;"></i>
              </div>
              <div class="p-2">
                <button type="button"
                  class="btn btn-danger"
                  data-bs-toggle="modal"
                  data-bs-target="#feedback">
                  Báo cáo vi phạm
                </button>
              </div>
            </div>
          </div>
        `;
      };

      const locationCardFactory = (result) => {
        return `
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-check2-circle flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">
            <path d="M2.5 8a5.5 5.5 0 0 1 8.25-4.764.5.5 0 0 0 .5-.866A6.5 6.5 0 1 0 14.5 8a.5.5 0 0 0-1 0 5.5 5.5 0 1 1-11 0z"/>
            <path d="M15.354 3.354a.5.5 0 0 0-.708-.708L8 9.293 5.354 6.646a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0l7-7z"/>
          </svg>
          <div>
            <h5 class="font-weight-bold"> Thông tin địa điểm </h5>
            <h5 class="font-weight-bold">
              ${result.text}  
            </h5>
            <h5>
              ${result.place_name ? result.place_name : ""}
            </h5>
            <div class="d-flex justify-content-end">
              <button type="button"
                class="btn btn-danger"
                data-bs-toggle="modal"
                data-bs-target="#feedback">
                Báo cáo vi phạm
              </button>
            </div>
        </div>`;
      };

      const clearSidebar = () => {
        const sidebarContent = document.querySelector(".sidebar-content");
        sidebarContent.innerHTML = `
          <div
            class="sidebar-toggle rounded-rect left"
            onclick="toggleSidebar('left')"
          >
            &rarr;
          </div>
        `;
      };

      async function addMarker(x, y) {
        if (currentMarker) {
          currentMarker.remove();
        }
        const el = document.createElement("div");
        el.className = "marker";
        currentMarker = new mapboxgl.Marker(el).setLngLat([x, y]).addTo(map);
      }
      // Side bar
      function toggleSidebar(id) {
        const elem = document.getElementById(id);
        // Add or remove the 'collapsed' CSS class from the sidebar element.
        // Returns boolean "true" or "false" whether 'collapsed' is in the class list.
        const collapsed = elem.classList.toggle("collapsed");
        const padding = {};
        // 'id' is 'right' or 'left'. When run at start, this object looks like: '{left: 300}';
        padding[id] = collapsed ? 0 : 300; // 0 if collapsed, 300 px if not. This matches the width of the sidebars in the .sidebar CSS class.
        // Use `map.easeTo()` with a padding option to adjust the map's center accounting for the position of sidebars.
        map.easeTo({
          padding: padding,
          essential: true,
          duration: 1000, // In ms. This matches the CSS transition duration property.
        });
      }

      async function initMap() {
        const locations = await logLocations();
        const geojson = {
          type: "FeatureCollection",
          features: [],
        };
        locations.map((location) => {
          const feature = {
            type: "Feature",
            geometry: {
              type: "Point",
              coordinates: [location.longitude, location.latitude],
            },
            properties: {
              method: location.method,
              type: location.type,
              address: location.address,
              status: location.accepted ? "Đã quy hoạch" : "Chưa quy hoạch",
            },
          };
          geojson.features.push(feature);
        });

        map.on("load", () => {
          const popup = new mapboxgl.Popup({
            closeButton: false,
            closeOnClick: false,
          });

          map.addSource("AdsLocations", {
            type: "geojson",
            data: geojson,
            cluster: true,
            clusterMaxZoom: 35,
            clusterRadius: 50,
          });

          map.addLayer({
            id: "clusters",
            type: "circle",
            source: "AdsLocations",
            filter: ["has", "point_count"],
            paint: {
              "circle-color": [
                "step",
                ["get", "point_count"],
                "#51bbd6",
                10,
                "#f1f075",
                30,
                "#f28cb1",
              ],
              "circle-radius": [
                "step",
                ["get", "point_count"],
                20,
                100,
                30,
                750,
                40,
              ],
            },
          });

          map.addLayer({
            id: "cluster-count",
            type: "symbol",
            source: "AdsLocations",
            filter: ["has", "point_count"],
            layout: {
              "text-field": ["get", "point_count_abbreviated"],
              "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
              "text-size": 12,
            },
          });

          map.addLayer({
            id: "unclustered-point",
            type: "circle",
            source: "AdsLocations",
            filter: ["!", ["has", "point_count"]],
            paint: {
              "circle-color": "#11b4da",
              "circle-radius": 15,
              "circle-stroke-width": 1,
              "circle-stroke-color": "#fff",
            },
          });

          map.addLayer({
            id: "cluster-ads",
            type: "symbol",
            source: "AdsLocations",
            filter: ["!", ["has", "point_count"]],
            layout: {
              "text-field": "QC",
              "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
              "text-size": 12,
            },
          });

          map.on("click", "clusters", (e) => {
            e.clickOnLayer = true;
            const features = map.queryRenderedFeatures(e.point, {
              layers: ["clusters"],
            });
            const clusterId = features[0].properties.cluster_id;
            map
              .getSource("AdsLocations")
              .getClusterExpansionZoom(clusterId, (err, zoom) => {
                if (err) return;

                map.easeTo({
                  center: features[0].geometry.coordinates,
                  duration: 500,
                  essential: true,
                  zoom: zoom,
                });
              });
          });

          map.on("click", "unclustered-point", (e) => {
            e.clickOnLayer = true;
          });

          map.on("mouseenter", "unclustered-point", (e) => {
            map.getCanvas().style.cursor = "pointer";
            const coordinates = e.features[0].geometry.coordinates.slice();

            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
              coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
            }

            popup
              .setLngLat(coordinates)
              .setHTML(
                `<h2>${e.features[0].properties.method}</h2>
                <p>${e.features[0].properties.type}</p>
                <p>${e.features[0].properties.address}</p>
                <h2>${e.features[0].properties.status}</h2>`
              )
              .addTo(map);
          });

          map.on("mouseleave", "unclustered-point", () => {
            map.getCanvas().style.cursor = "";
            popup.remove();
          });

          map.on("mouseenter", "clusters", () => {
            map.getCanvas().style.cursor = "pointer";
          });
          map.on("mouseleave", "clusters", () => {
            map.getCanvas().style.cursor = "";
          });

          // Reverse geocoding
          map.on("click", (e) => {
            if (e.clickOnLayer) {
              return;
            }
            let m = e.lngLat.wrap();
            geocoder.query(`${m.lng}, ${m.lat}`);
          });
          geocoder.on("result", (e) => {
            clearSidebar();
            const sidebarContent = document.querySelector(".sidebar-content");
            const locationCard = locationCardFactory(e.result);
            const card = document.createElement("div");
            card.className = "alert alert-success d-flex m-4";
            card.innerHTML = locationCard;
            sidebarContent.appendChild(card);
          });
        });

        map.on("click", "unclustered-point", (e) => {
          clearSidebar();
          const sidebarContent = document.querySelector(".sidebar-content");
          const adsCardContent = AdsCardFactory(e.features[0].properties);
          const card = document.createElement("div");
          card.className = "card bg-light my-3";
          card.style = "max-width: 20rem;";
          card.innerHTML = adsCardContent;
          sidebarContent.appendChild(card);
        });

        // Add the control to the map and search bar.
        // map.addControl(
        //   new MapboxGeocoder({
        //     accessToken: mapboxgl.accessToken,
        //     mapboxgl: mapboxgl,
        //   })
        // );

        // Add geolocate control to the map.
        map.addControl(
          new mapboxgl.GeolocateControl({
            positionOptions: {
              enableHighAccuracy: true,
            },
            // When active the map will receive updates to the device's location as it changes.
            trackUserLocation: true,
            // Draw an arrow next to the location dot to indicate which direction the device is heading.
            showUserHeading: true,
          })
        );
      }

      initMap();
    </script>
  </body>
</html>
