<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>AdHubPro</title>
    <meta
      name="viewport"
      content="initial-scale=1,maximum-scale=1,user-scalable=no"
    />
    <link
      href="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css"
      rel="stylesheet"
    />
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js"></script>
    <style>
      body {
        margin: 0;
        padding: 0;
      }
      #map {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 100%;
      }
      .marker {
        background-image: url("https://docs.mapbox.com/help/demos/custom-markers-gl-js/mapbox-icon.png");
        background-size: cover;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        cursor: pointer;
      }
      .mapboxgl-popup {
        max-width: 200px;
      }
      .mapboxgl-popup-content {
        text-align: center;
        font-family: "Open Sans", sans-serif;
      }
    </style>
  </head>
  <body>
    <!-- Load the `mapbox-gl-geocoder` plugin. -->
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.min.js"></script>
    <link
      rel="stylesheet"
      href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.css"
      type="text/css"
    />
    <div id="map"></div>

    <script>
      mapboxgl.accessToken =
        "pk.eyJ1Ijoibm1raG9pMjEiLCJhIjoiY2xvMno5ZzhyMGQzdTJ2bGVkbTc4bGZ5dSJ9.9ljGVzjte5iqJXpbOiAN1Q";

      // Fetch locations data
      async function logLocations() {
        const response = await fetch("http://localhost:4000/api/location");
        const locations = await response.json();
        return locations;
      }

      async function initMap() {
        const locations = await logLocations();
        const geojson = {
          type: "FeatureCollection",
          features: [],
        };
        locations.map((location) => {
          const feature = {
            type: "Feature",
            geometry: {
              type: "Point",
              coordinates: [location.longitude, location.latitude],
            },
            properties: {
              method: location.method,
              type: location.type,
              address: location.address,
              status: location.accepted ? "Đã quy hoạch" : "Chưa quy hoạch",
            },
          };
          geojson.features.push(feature);
        });

        console.log(geojson.features);

        const map = new mapboxgl.Map({
          container: "map",
          style: "mapbox://styles/mapbox/streets-v12",
          center: [106.68247166663183, 10.762993690850745],
          zoom: 15,
        });

        // add markers to map
        for (const feature of geojson.features) {
          const el = document.createElement("div");
          el.className = "marker";

          // make a marker for each feature and add it to the map
          new mapboxgl.Marker(el)
            .setLngLat(feature.geometry.coordinates)
            .setPopup(
              new mapboxgl.Popup() // add popups
                .setHTML(
                  `<h2>${feature.properties.method}</h2>
                <p>${feature.properties.type}</p>
                <p>${feature.properties.address}</p>
                <h2>${feature.properties.status}</h2>`
                )
            )
            .addTo(map);
        }

        // Add the control to the map and search bar.
        map.addControl(
          new MapboxGeocoder({
            accessToken: mapboxgl.accessToken,
            mapboxgl: mapboxgl,
          })
        );
      }

      initMap();

      // map.on("load", () => {
      //   map.addSource("earthquakes", {
      //     type: "geojson",
      //     data: "https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson",
      //     cluster: true,
      //     clusterMaxZoom: 14,
      //     clusterRadius: 50,
      //   });

      //   map.addLayer({
      //     id: "clusters",
      //     type: "circle",
      //     source: "earthquakes",
      //     filter: ["has", "point_count"],
      //     paint: {
      //       "circle-color": [
      //         "step",
      //         ["get", "point_count"],
      //         "#51bbd6",
      //         100,
      //         "#f1f075",
      //         750,
      //         "#f28cb1",
      //       ],
      //       "circle-radius": [
      //         "step",
      //         ["get", "point_count"],
      //         20,
      //         100,
      //         30,
      //         750,
      //         40,
      //       ],
      //     },
      //   });

      //   map.addLayer({
      //     id: "cluster-count",
      //     type: "symbol",
      //     source: "earthquakes",
      //     filter: ["has", "point_count"],
      //     layout: {
      //       "text-field": ["get", "point_count_abbreviated"],
      //       "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
      //       "text-size": 12,
      //     },
      //   });

      //   map.addLayer({
      //     id: "unclustered-point",
      //     type: "circle",
      //     source: "earthquakes",
      //     filter: ["!", ["has", "point_count"]],
      //     paint: {
      //       "circle-color": "#11b4da",
      //       "circle-radius": 4,
      //       "circle-stroke-width": 1,
      //       "circle-stroke-color": "#fff",
      //     },
      //   });

      //   map.on("click", "clusters", (e) => {
      //     const features = map.queryRenderedFeatures(e.point, {
      //       layers: ["clusters"],
      //     });
      //     const clusterId = features[0].properties.cluster_id;
      //     map
      //       .getSource("earthquakes")
      //       .getClusterExpansionZoom(clusterId, (err, zoom) => {
      //         if (err) return;

      //         map.easeTo({
      //           center: features[0].geometry.coordinates,
      //           zoom: zoom,
      //         });
      //       });
      //   });

      //   map.on("click", "unclustered-point", (e) => {
      //     const coordinates = e.features[0].geometry.coordinates.slice();
      //     const mag = e.features[0].properties.mag;
      //     const tsunami = e.features[0].properties.tsunami === 1 ? "yes" : "no";

      //     while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
      //       coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
      //     }

      //     new mapboxgl.Popup()
      //       .setLngLat(coordinates)
      //       .setHTML(`magnitude: ${mag}<br>Was there a tsunami?: ${tsunami}`)
      //       .addTo(map);
      //   });

      //   map.on("mouseenter", "clusters", () => {
      //     map.getCanvas().style.cursor = "pointer";
      //   });
      //   map.on("mouseleave", "clusters", () => {
      //     map.getCanvas().style.cursor = "";
      //   });
      // });
    </script>
  </body>
</html>
