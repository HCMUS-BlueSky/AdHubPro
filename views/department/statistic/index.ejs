<!-- Right Part -->
<div class="col p-3 border-start">
  <%- include('../../partials/header.ejs') %>
  <hr />
  <div class="row d-flex justify-content-around align-items-end">
    <div class="col-6">
      <form
        role="search"
        method="GET"
        action="/department/statistic/filter"
        class="form-group"
      >
        <div class="row align-items-end">
          <div class="col">
            <label for="" class="form-label">Quận</label>
            <select
              class="form-select district-select"
              aria-label=""
              name="district_select"
            >
              <% districts.forEach(district => { %>
              <option value="<%= district._id %>" <%= district.name === selectedDistrict ? 'selected' : '' %>><%= district.name %></option>
              <% }) %>
            </select>
          </div>
          <div class="col">
            <label for="" class="form-label">Phường</label>
            <select
              class="form-select ward-select"
              name="ward_select"
              aria-label=""
            ></select>
          </div>
          <div class="col">
            <button type="submit" class="btn btn-primary">Tìm kiếm</button>
          </div>
        </div>
      </form>
    </div>
    <div class="col-2">
      <a
        class="btn btn-primary"
        href="/department/statistic/overview"
        role="button"
        >Xem chi tiết</a
      >
    </div>
  </div>
  <div class="d-flex justify-content-center py-3" id="piechart"></div>

  <div class="d-flex justify-content-center">
    <div id="barchart"></div>
  </div>
</div>

<script
  type="text/javascript"
  src="https://www.gstatic.com/charts/loader.js"
></script>
<script type="text/javascript">
  async function createChart() {
    // const reportsCountResponse = await fetch("/utils/reports/count");
    // const reportsCount = await reportsCountResponse.json();
    let reportsCount = "<%= reportsCount %>".split(",");
    reportsCount = reportsCount.map((el) => parseInt(el));

    // Load google charts
    google.charts.load("current", { packages: ["corechart"] });
    google.charts.setOnLoadCallback(drawChart);

    // Draw the chart and set the chart values
    function drawChart() {
      var data = google.visualization.arrayToDataTable([
        ["Trạng thái xử lý", "Số lượng báo cáo"],
        ["Chờ xử lý", reportsCount[0]],
        ["Đang xử lý", reportsCount[1]],
        ["Đã xử lý", reportsCount[2]],
      ]);

      // Optional; add a title and set the width and height of the chart
      var options = {
        title: "Thống kê báo cáo",
        subtitle: "01/01/2024 - Hiện tại",
        fontName: "Be Vietnam Pro",
        titleTextStyle: {
          color: "#313131",
          fontSize: 18, // 12, 18 whatever you want (don't specify px)
          bold: true, // true or false
          italic: false, // true or false
        },
        backgroundColor: "rgb(248,249,250)",
        width: 800,
        height: 300,
      };

      // Display the chart inside the <div> element with id="piechart"
      var chart = new google.visualization.PieChart(
        document.getElementById("piechart")
      );
      chart.draw(data, options);
    }
  }
  createChart();
</script>
<script
  type="text/javascript"
  src="https://www.gstatic.com/charts/loader.js"
></script>
<script type="text/javascript">
  async function createBarChart() {
    let reportsMonthlyCount = "<%= monthlyCountsArray %>".split(",");
    reportsMonthlyCount = reportsMonthlyCount.map(el => parseInt(el));

    google.charts.load("current", { packages: ["bar"] });
    google.charts.setOnLoadCallback(drawStuff);

    function getDatatable() {
      let data = [["Tháng", "Số lượng báo cáo"]];
      for (let i = 1; i <= 12; i++) {
        let monthlyData = ["Tháng " + i, reportsMonthlyCount[i - 1]];
        data.push(monthlyData);
      }
      return data;
    }

    function drawStuff() {
      let dataTable = getDatatable();

      var data = new google.visualization.arrayToDataTable(dataTable);

      var options = {
        width: 800,
        height: 500,
        legend: { position: "none" },
        chart: {
          title: "Số lượng báo cáo theo từng tháng",
          subtitle: "01/01/2024 - Hiện tại",
        },
        bars: "vertical", // Required for Material Bar Charts.
        axes: {
          x: {
            0: { side: "bottom", label: "Số lượng báo cáo" }, // Top x-axis.
          },
        },
        bar: { groupWidth: "50%" },
      };

      var chart1 = new google.charts.Bar(document.getElementById("barchart"));
      chart1.draw(data, options);
    }
  }
  createBarChart();
</script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    var districtSelect = document.querySelector(".district-select");
    var wardSelect = document.querySelector(".ward-select");

    districtSelect.addEventListener("change", async () => {
      let selectedOption = districtSelect.options[districtSelect.selectedIndex];
      let district = selectedOption.value;
      const response = await fetch(`/utils/districts/${district}/wards`);
      const data = await response.json();
      populateWards(data.wards);
    });

    districtSelect.dispatchEvent(new Event("change"));

    function populateWards(wards) {
      wardSelect.innerHTML = "";
      let option = document.createElement("option");
      option.value = "Không";
      option.innerHTML = "Không";
      wardSelect.appendChild(option);

      wards.forEach((ward) => {
        let option = document.createElement("option");
        option.value = ward;
        option.innerHTML = ward;

        if ("<%= selectedWard %>" == ward) {
          option.selected = 'selected';
        }
        wardSelect.appendChild(option);
      });
    }
  });
</script>
